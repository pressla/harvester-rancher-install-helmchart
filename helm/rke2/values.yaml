cluster_name: mycluster
cluster_namespace: default

shared_token: insecuretoken
system_default_registry: ""       #! empty value: use embedded default
                                  #! non-empty value: use as regsitry to source rke2 runtime image from
                                  #! if your VM image contains the tarballs for RKE2, it will use those first
rke2_version: v1.26.10+rke2r2

ssh_pub_key: ""                   #! the public ssh key to inject onto each node, required if you want to fetch a kubeconfig

# registry_config:
#   configs:
#     "rgcrprod.azurecr.us":
#       auth:
#         username: test
#         password: test

vm:
  image_namespace: default        #! namespace in your harvester cluster containing the vm base image
  image: ubuntu                   #! name of base vm image to use for your RKE2 nodes
  os: linux
  distro: ubuntu                  #! flag used for specific cloud-init code tied to Ubuntu vs others (netplan)
  uefi_enabled: true
  qemu_agent_install: true        #! flag for installation of the qemu-agent service (Requires internet)
  qemu_agent_enable: true         #! flag for enabling the qemu-agent
  airgapped_image: false          #! flag to alert helm that your VM image already has the RKE2 install script (and does not need to download it)


network_name: vmnet

control_plane:
  node_count: 1
  cpu_count: 4
  memory_gb: 8
  node_disk_gb: 50
  loadbalancer_gateway: 10.10.0.1
  loadbalancer_subnet: 10.10.0.0/24
  files: []
  # files:
  # - path: /tmp/test
  #   owner: root
  #   content: |
  #     created a file

  vip:                            #! this is the VIP for the Harvester LoadBalancer object, ensure it is a routable IP
  ipam: dhcp                      #! this can be dhcp or static, static requires an equal amount of cloud-init network-data entries

  # network:
  # - |   #! ubuntu example
  #   network:
  #     version: 2
  #     renderer: networkd
  #     ethernets:
  #       enp1s0:
  #         dhcp4: no
  #         addresses: [ "10.10.0.6/24" ]
  #         gateway4: 10.10.0.1
  #         nameservers:
  #           addresses: 
  #           - 10.10.0.1

worker:
  node_count: 1
  cpu_count: 4
  memory_gb: 12
  node_disk_gb: 50
  files: []
  # files:
  # - path: /tmp/test
  #   owner: root
  #   content: |
  #     created a file

  ipam: dhcp                      #! this can be dhcp or static, static requires an equal amount of cloud-init network-data entries

  # network:
  # - |
  #   network:
  #     version: 2
  #     renderer: networkd
  #     ethernets:
  #       enp1s0:
  #         dhcp4: no
  #         addresses: [ "10.10.0.20/24" ]
  #         gateway4: 10.10.0.1
  #         nameservers:
  #           addresses: 
  #           - 10.10.0.1
